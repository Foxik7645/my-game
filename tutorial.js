// tutorial.js ‚Äî –ø–æ—à–∞–≥–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å –°–æ–≤–µ—Ç–Ω–∏–∫–æ–º –∫–æ—Ä–æ–ª—è

const wait = (ms)=> new Promise(r=>setTimeout(r,ms));
async function waitForAPI(){
  for(let i=0;i<200;i++){
    if(window.__game) return;
    await wait(50);
  }
}

// DOM
const overlay   = document.getElementById('tutorialOverlay');
const msgNode   = document.getElementById('advisorMessage');
const nextBtn   = document.getElementById('tutorialNextBtn');
const skipBtn   = document.getElementById('tutorialSkipBtn');

let stepIndex = 0;
let active = true;

function showOverlay(message){ overlay.style.display='flex'; msgNode.textContent = message; }
function hideOverlay(){ overlay.style.display='none'; }
function say(t){ msgNode.textContent = t; }

function lockShop(allowedTypes){
  const panel = document.getElementById('shopPanel');
  if(!panel) return;
  panel.querySelectorAll('.card').forEach(card=>{
    const type = card.dataset.type;
    const allowed = allowedTypes.includes(type);
    card.style.pointerEvents = allowed ? 'auto' : 'none';
    card.style.opacity = allowed ? '1' : '0.35';
    const btn = card.querySelector('.buyBtn');
    if(btn){ btn.disabled = !allowed; }
    card.classList.toggle('pulse', allowed);
  });
}

function focusShopCard(type){
  window.__game.openShop();
  const card = document.querySelector(`.card[data-type="${type}"]`);
  if(card){
    card.classList.add('highlight-tut','pulse');
    card.scrollIntoView({block:'center', behavior:'smooth'});
    document.querySelectorAll('#shopPanel .card').forEach(c=> c.classList.toggle('active', c===card));
  }
}

const steps = [
  {
    text: '–í–µ–ª–∏–∫–∏–π –∫–æ—Ä–æ–ª—å, –≤–∞–º –¥–∞—Ä–æ–≤–∞–Ω–∞ –ø—É—Å—Ç–∞—è –∑–µ–º–ª—è. –ü–æ—Ä–∞ –æ—Å–Ω–æ–≤–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ –∏ –ø—Ä–∏–≤–µ—Å—Ç–∏ –µ–≥–æ –∫ –ø—Ä–æ—Ü–≤–µ—Ç–∞–Ω–∏—é!',
    onEnter(){ showOverlay(this.text); window.__game.highlight(null,false); }
  },
  {
    text: '–ù–∞—á–Ω—ë–º —Å –≥–ª–∞–≤–Ω–æ–≥–æ. –û—Ç–∫—Ä–æ–π –ú–∞–≥–∞–∑–∏–Ω –∏ –ø–æ—Å—Ç—Ä–æ–π —Å–≤–æ—é –ø–µ—Ä–≤—É—é –ë–∞–∑—É ‚Äî —Å–µ—Ä–¥—Ü–µ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞.',
    onEnter(){
      showOverlay(this.text);
      window.__game.openShop();
      lockShop(['base']);
      focusShopCard('base');
      window.__game.highlight('#shopToggle', true);
    },
    waitFor: { event: 'mg:building-added', predicate: b => b.type==='base' }
  },
  {
    text: '–ß—Ç–æ–±—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ, –ø–æ—Å—Ç—Ä–æ–π –∫—É—Ö–Ω—é HouseEat. –í –Ω–µ–π –≥–æ—Ç–æ–≤—è—Ç üçî –µ–¥—É –¥–ª—è —Ä–∞–±–æ—á–∏—Ö.',
    onEnter(){ showOverlay(this.text); lockShop(['houseeat']); focusShopCard('houseeat'); },
    waitFor: { event: 'mg:building-added', predicate: b => b.type==='houseeat' }
  },
  {
    text: '–¢–µ–ø–µ—Ä—å –ø–æ—Å—Ç—Ä–æ–π FermerDom. –§–µ—Ä–º–µ—Ä—ã –±—É–¥—É—Ç –¥–æ–±—ã–≤–∞—Ç—å üåΩ –∫—É–∫—É—Ä—É–∑—É. –†–∞–±–æ—á–∏—Ö –Ω–∞–Ω–∏–º–∞—é—Ç –∑–∞ üçî –µ–¥—É.',
    onEnter(){ showOverlay(this.text); lockShop(['fermerdom']); focusShopCard('fermerdom'); },
    waitFor: { event: 'mg:building-added', predicate: b => b.type==='fermerdom' }
  },
  {
    text: '–û—Ç–ª–∏—á–Ω–æ! –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–æ–ª–æ—Ç–æ ‚Äî —Ç–æ—Ä–≥—É–π –Ω–∞ —Ä—ã–Ω–∫–µ: ü™µ –¥–µ—Ä–µ–≤–æ, ü™® –∫–∞–º–µ–Ω—å –∏ üåΩ –∫—É–∫—É—Ä—É–∑–∞ ‚Üí üí∞.',
    onEnter(){ showOverlay(this.text); window.__game.highlight('#marketBtn', true); },
    waitFor: { domClick: '#marketBtn' }
  },
  {
    text: '–¢—ã –æ—Å–Ω–æ–≤–∞–ª —Å–≤–æ—ë –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ! –°–æ–≤–µ—Ç–Ω–∏–∫ –¥–æ–≤–æ–ª–µ–Ω —Ç–≤–æ–∏–º–∏ —à–∞–≥–∞–º–∏. –ü—Ä–∏–º–∏ —Ü–∞—Ä—Å–∫—É—é –Ω–∞–≥—Ä–∞–¥—É üéÅ',
    onEnter(){
      showOverlay(this.text);
      window.__game.addResources({ wood:50, stone:20, corn:10, food:12 });
      window.__game.toast('üéÅ –ù–∞–≥—Ä–∞–¥–∞: +50 ü™µ, +20 ü™®, +10 üåΩ, +12 üçî', 2600);
      setTimeout(()=>{ window.__game.highlight(null,false); hideOverlay(); active=false; }, 1500);
    }
  }
];

let pendingUnsub = null;
function gotoStep(i){
  if (typeof pendingUnsub==='function'){ pendingUnsub(); pendingUnsub=null; }
  stepIndex = i;
  const step = steps[stepIndex];
  if(!step) return;
  step.onEnter?.();
  if(step.waitFor?.event){
    const handler = e=>{
      if(!active) return;
      if(step.waitFor.predicate?.(e.detail)){ window.removeEventListener(step.waitFor.event, handler); gotoStep(stepIndex+1); }
    };
    window.addEventListener(step.waitFor.event, handler);
    pendingUnsub = ()=> window.removeEventListener(step.waitFor.event, handler);
  } else if(step.waitFor?.domClick){
    const el=document.querySelector(step.waitFor.domClick);
    if(el){ el.addEventListener('click', ()=>gotoStep(stepIndex+1), { once:true }); }
  }
}

nextBtn.addEventListener('click', ()=>{ const s=steps[stepIndex]; if(s&&!s.waitFor) gotoStep(stepIndex+1); else say(s.text); });
skipBtn.addEventListener('click', ()=>{ active=false; hideOverlay(); window.__game.highlight(null,false); window.__game.toast('–û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ',1200); });

(async function boot(){ await waitForAPI(); gotoStep(0); })();
