// js/buildings.js
import { map, spawnTreesBatch, spawnRocksBatch, spawnCornBatch } from './map.js';
import { showToast } from './ui.js';
import { resources, updateResourcePanel } from './resources.js';

// ===== –ò–∫–æ–Ω–∫–∏ –∑–¥–∞–Ω–∏–π (–º–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø -> —Ñ–∞–π–ª) =====
const BUILDING_ICONS = {
  drovosekdom: './images/DrovosekDom.png',
  minehouse:   './images/Minehouse.png',
  base:        './images/Base.png',
  fermerdom:   './images/FermerDom.png',
  houseeat:    './images/HouseEat.png',
};

// ===== –ú–∞—Ä–∫–µ—Ä—ã/–¥–∞–Ω–Ω—ã–µ =====
export const markers = new Map();       // id -> Leaflet marker
export const buildingData = new Map();  // id -> {type, lat, lng, level, ...}

// ===== –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–¥–∞–Ω–∏—è =====
export function renderBuildingDoc(id, data){
  if (!map) return;

  const url = BUILDING_ICONS[data.type] || BUILDING_ICONS.base;
  const icon = L.icon({ iconUrl: url, iconSize: [48,48] });
  const marker = L.marker([data.lat, data.lng], { icon }).addTo(map);

  markers.set(id, marker);
  buildingData.set(id, { ...data });

  marker.bindPopup(makePopupHtml({ id, ...data }));

  // –†–µ—Å—É—Ä—Å—ã –ø–æ—è–≤–ª—è—é—Ç—Å—è –¢–û–õ–¨–ö–û –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–π–∫–µ –∑–¥–∞–Ω–∏—è —Ä—è–¥–æ–º —Å –Ω–∏–º
  if (data.type === 'drovosekdom')  spawnTreesBatch(6, data.lat, data.lng);
  if (data.type === 'minehouse')    spawnRocksBatch(4, data.lat, data.lng);
  if (data.type === 'fermerdom')    spawnCornBatch(8, data.lat, data.lng);
}

export function unrenderBuildingDoc(id){
  const m = markers.get(id);
  if (m) { m.remove(); markers.delete(id); }
  buildingData.delete(id);
}

// ===== –ü–æ–ø–∞–ø—ã =====
export function makePopupHtml(b){
  const lvl = b.level || 1;

  if (b.type === 'houseeat') {
    return `
      <div class="pixel">
        <b>–ö—É—Ö–Ω—è</b> ‚Ä¢ Lv.${lvl}<br/>
        –ì–æ—Ç–æ–≤–∏—Ç 10 üçî –∑–∞ 5 üåΩ + 50 üí∞<br/>
        <button onclick="cookFood('${b.id}')">–ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å</button>
      </div>`;
  }
  if (b.type === 'drovosekdom') return `<div class="pixel"><b>–î–æ–º –¥—Ä–æ–≤–æ—Å–µ–∫–∞</b> ‚Ä¢ Lv.${lvl}</div>`;
  if (b.type === 'minehouse')   return `<div class="pixel"><b>–î–æ–º —à–∞—Ö—Ç—ë—Ä–∞</b> ‚Ä¢ Lv.${lvl}</div>`;
  if (b.type === 'fermerdom')   return `<div class="pixel"><b>–î–æ–º —Ñ–µ—Ä–º–µ—Ä–∞</b> ‚Ä¢ Lv.${lvl}</div>`;
  if (b.type === 'base')        return `<div class="pixel"><b>–ë–∞–∑–∞</b> ‚Ä¢ Lv.${lvl}</div>`;
  return `<div class="pixel"><b>${b.type}</b> ‚Ä¢ Lv.${lvl}</div>`;
}

// ===== –ü—Ä–æ—Å—Ç–µ–π—à–∏–µ –∑–∞–≥–ª—É—à–∫–∏ –∞–ø–≥—Ä–µ–π–¥–æ–≤/—É–¥–∞–ª–µ–Ω–∏—è =====
export function upgradeBuilding(id){
  const b = buildingData.get(id);
  if (!b) return;
  b.level = (b.level || 1) + 1;
  const m = markers.get(id);
  if (m) m.bindPopup(makePopupHtml({ id, ...b }));
  showToast(`–ó–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–æ –¥–æ —É—Ä–æ–≤–Ω—è ${b.level}`);
}

export function deleteBuilding(id){
  unrenderBuildingDoc(id);
  showToast('–ó–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ');
}

export function upgradeBase(){
  showToast('–ë–∞–∑–∞: –∞–ø–≥—Ä–µ–π–¥ (–∑–∞–≥–ª—É—à–∫–∞)');
}

// ===== –ö—É—Ö–Ω—è: –≥–æ—Ç–æ–≤–∫–∞ =====
const COOK_COST_MONEY = 50;
const COOK_COST_CORN  = 5;
const COOK_GAIN_FOOD  = 10;

export function cookFood(buildingId){
  // buildingId —Å–µ–π—á–∞—Å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ API
  if (resources.money < COOK_COST_MONEY || resources.corn < COOK_COST_CORN){
    showToast('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –≥–æ—Ç–æ–≤–∫–∏');
    return;
  }
  resources.money -= COOK_COST_MONEY;
  resources.corn  -= COOK_COST_CORN;
  resources.food  += COOK_GAIN_FOOD;
  updateResourcePanel();
  showToast(`–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${COOK_GAIN_FOOD} üçî`);
}
